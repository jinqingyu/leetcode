/*
[LeetCode新题] Binary Tree Upside Down
Given a binary tree where all the right nodes are either leaf nodes with a sibling 
(a left node that shares the same parent node) or empty, 
flip it upside down and turn it into a tree where the original right nodes turned 
into left leaf nodes. Return the new root.

For example:
Given a binary tree {1,2,3,4,5},
    1
   / \
  2   3
 / \
4   5
return the root of the binary tree [4,5,2,#,#,3,1].
   4
  / \
 5   2
    / \
   3   1  
   
*/

TreeNode* upsideDown(TreeNode* root){
    TreeNode* res;
    upsideDownRec(root, res);
    return res;
}

TreeNode* upsideDownRec(TreeNode* node, Tree*&newRoot){
    if(node==NULL) return NULL;
    if(!node->left && !node->right){
        newRoot = node;
        return node;
    }
    
    TreeNode* newP = upsideDownRec(node->left, newRoot);
    newP->right = node;
    newP->left = node->right;
    node->left = node->right = NULL;
    return node;
}

TreeNode* upsideDown(TreeNode* root){
    if(!root) return NULL;
    TreeNode* left = root, *parent = NULL, *right = NULL;
    
    while(left){
        TreeNode *nextLeft = left->left, *nextRight = left->right;
        left->right = parent;
        left->left = right;
        
        parent = left;
        left  = nextLeft;
        right = nextRight;
    }
    return parent;
}
